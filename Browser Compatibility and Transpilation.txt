Transpilation With Babel:

Because ES6 is predictably backwards compatible, a collection of JavaScript programmers developed a JavaScript library called Babel that transpiles ES6 JavaScript to ES5.

Transpilation is the process of converting one programming language to another.

In the remaining exercises of this lesson, you will learn how to use Babel to transpile the new, easy-to-write version of JavaScript (ES6) to the old, browser-compatible version of JavaScript (ES5).

In the instructions below, you will pass JavaScript ES6 code to Babel, which will transpile it to ES5 and write it to a file in the lib directory.


// transpilation: The process of converting one programming language to another.

// ---1
In the terminal window type:

- npm install babel-cli 

This installs one of the two required Babel packages.

// ---2
In the terminal window type:

- npm install babel-preset-env

This installs the second of two required Babel packages.

// ---3
In the terminal, type 

- npm run build

and press enter.

You can view the ES5 code in ./lib/main.js.

You may need to refresh to see the newly created lib directory.

-------------------------------------------------------------------------------

// ---how to setup a JavaScript project that transpiles code when you run npm run build from the root directory of a JavaScript project.
// ---1
The first step is to place your ES6 JavaScript file in a directory called src. From your root directory, the path to the ES6 file is ./src/main.js
// ---2
Before we install Babel, we need to setup our project to use the node package manager (npm)
Developers use npm to access and manage Node packages. Node packages are directories that contain JavaScript code written by other developers.
You can use these packages to reduce duplication of work and avoid bugs.

Before we can add Babel to our project directory, we need to run npm init. The npm init command creates a package.json file in the root directory.

If you have Node installed on your computer, you can create a package.json file by typing npm init

Run ls in the terminal to see the file structure of your current directory.

// ---3
We install Babel with the following two commands:

$ npm install babel-cli -D
$ npm install babel-preset-env -D

(The -D flag instructs npm to add each package to a property called devDependencies in package.json. 
Once the project's dependencies are listed in devDependencies, other developers can run your project without installing each package separately. 
Instead, they can simply run npm install — it instructs npm to look inside package.json and download all of the packages listed in devDependencies.)

// ---4
Now that you've downloaded the Babel packages, you need to specify the version of the source JavaScript code.

You can specify the initial JavaScript version inside of a file named .babelrc. In your root directory, you can run touch .babelrc to create this file.

In the root directory, use touch to create a new .babelrc file. (touch .babelrc)

Open the .babelrc file and add an object that specifies the preset to "env"

{
  "presets": ["env"]
}

// ---5
There's one last step before we can transpile our code. We need to specify a script in package.json that initiates the ES6+ to ES5 transpilation.

Inside of the package.json file, there is a property named "scripts" that holds an object for specifying command line shortcuts.

"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "build": "babel src -d lib"
}

In the "scripts" object above, we add a property called "build". The property's value, "babel src -d lib", is a command line method that transpiles ES6+ code to ES5.

babel — The Babel command call responsible for transpiling code

src — Instructs Babel to transpile all JavaScript code inside the src directory.

-d — Instructs Babel to write the transpiled code to a directory.

lib — Babel writes the transpiled code to a directory called lib.

// ---6
we need to call "build" from the command line to transpile and write ES5 code to a directory called lib.

npm run build

Babel writes the ES5 code to a file named main.js (it's always the same name as the original file), inside of a folder called lib.

the directory contains a new folder named lib, with one file, called main.js.

The npm run build command will transpile all JavaScript files inside of the src folder. 
This is helpful as you build larger JavaScript projects — regardless of the number of JavaScript files, you only need to run one command (npm run build) to transpile all of your code.

// ---conclusion
ES5 — The old JavaScript version that is supported by all modern web browsers.
ES6 — The new(er) JavaScript version that is not supported by all modern web browsers. The syntax is more readable, similar to other programming languages, and addresses the source of common bugs in ES5.
caniuse.com — a website you can use to look up HTML, CSS, and JavaScript browser compatibility information.
Babel — A JavaScript package that transpiles JavaScript ES6+ code to ES5.
npm init — A terminal command that creates a package.json file.
package.json — A file that contains information about a JavaScript project.
npm install — A command that installs Node packages.
babel-cli — A Node package that contains command line tools for Babel.
babel-preset-env — A Node package that contains ES6+ to ES5 syntax mapping information.
.babelrc — A file that specifies the version of the JavaScript source code.
"build" script — A package.json script that you use to tranpsile ES6+ code to ES5.
npm run build — A command that runs the build script and transpiles ES6+ code to ES5.

---For future reference, here is a list of the steps needed to set up a project for transpilation:

1. Initialize your project using npm init and create a directory called src
2. Install babel dependencies by running
npm install babel-cli -D
npm install babel-preset-env -D
3. Create a .babelrc file inside your project and add the following code inside it:
{
  "presets": ["env"]
}
4. Add the following script to your scripts object in package.json:
"build": "babel src -d lib"
5. Run npm run build whenever you want to transpile your code from your src to lib directories.